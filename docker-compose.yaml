version: "3.8"


x-superset-image: &superset-image apache/superset:latest-dev
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - superset_home:/app/superset_home

services:
  # Superset services
  redis:
    image: redis:latest
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - network
    profiles:
      - superset

  db:
    env_file: docker/.env-non-dev
    image: postgres:10
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
    networks:
      - network
    profiles:
      - superset

  superset:
    env_file: docker/.env-non-dev
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    networks:
      - network
    profiles:
      - superset
  
  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: docker/.env-non-dev
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    networks:
      - network
    profiles:
      - superset

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    networks:
      - network
    profiles:
      - superset

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    networks:
      - network
    profiles:
      - superset

  # Additional Data Services

  generator-service:
    container_name: application_db_data_generator
    build:
      context: ./app
      dockerfile: Dockerfile
    entrypoint: /bin/bash
    command: crontab.sh
    environment:
      SHELL: /bin/bash 
    restart: unless-stopped
    depends_on:
      - migration_service
    networks:
      - network
    profiles:
      - application_db
      - superset

  migration-service:
    container_name: application_db_migration_service
    build:
      context: ./database
      dockerfile: Dockerfile.flyway
    entrypoint: flyway
    command: migrate
    depends_on:
      - application_db
    environment:
      FLYWAY_URL: jdbc:postgresql://application_db:5432/demo # jdbc:postgresql://[host]:[port]/[database]
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: docker
      FLYWAY_CONNECT_RETRIES: 100
    volumes:
      - ./database/scripts:/flyway/scripts
      - ./database/migrations:/flyway/sql
      - ./database/conf:/flyway/conf
    networks:
      - network
    profiles:
      - application_db
      - superset

  application_db:
    container_name: application_db
    build:
        context: ./database
        dockerfile: Dockerfile.postgres
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=400
    restart: always
    environment:
      POSTGRES_DB: demo
      POSTGRES_SCHEMA: demo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
    restart: unless-stopped
    ports:
      - 5433:5432
    networks:
      - network
    volumes:
      - application_db:/var/lib/mysql
    profiles:
      - application_db
      - superset

volumes:
  application_db:
    driver: local
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  
# A local docker network.
networks:
  network:
    driver: bridge